# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/112QDqAUa_X5_NDLi8sGxI8Q76VL_Eea7
"""

"""
Comprehensive tests for feature computation (HLA features and peptide embeddings)
"""
import pytest
import numpy as np
import pandas as pd
from src.features.hla_features import HLAFeatureGenerator
from src.features.peptide_embedder import PeptideEmbedder

# Test data
TEST_PEPTIDES = ["ACDEFGHIK", "YKLQPLTFL", "NLVPMVATV"]  # 9-mers
TEST_HLA = ["HLA-A*02:01", "HLA-B*07:02"]
INVALID_PEPTIDES = ["ACDEFGXIK", "TOOSHORT", ""]  # Invalid AA, too short, empty

@pytest.fixture
def sample_hla_data():
    """Sample peptide-HLA binding data for feature computation"""
    return pd.DataFrame({
        'HLA': ["HLA-A*02:01"]*5 + ["HLA-B*07:02"]*5,
        'peptide': TEST_PEPTIDES*2 + ["ACDEFGHIK", "YKLQPLTFL"],
        'label': [1,1,0,0,1, 0,1,0,1,1],  # Mixed binding labels
        'length': [9]*10
    })

@pytest.fixture
def hla_processor(sample_hla_data):
    """Initialized HLAFeatureGenerator with test data"""
    processor = HLAFeatureGenerator()
    processor._precompute_features([sample_hla_data])  # Train on sample data
    return processor

@pytest.fixture
def embedder():
    """Initialized peptide embedder"""
    return PeptideEmbedder(model_name='esm2_t6_8M')

# HLA Feature Tests
def test_hla_feature_shapes(hla_processor):
    """Verify feature dimensions are correct"""
    features = hla_processor.get_features("HLA-A*02:01")
    assert features.shape == (180,)  # 9 positions x 20 AA features
    assert not np.isnan(features).any()

def test_new_hla_features(hla_processor, sample_hla_data):
    """Test on-the-fly feature generation for new alleles"""
    new_hla_data = sample_hla_data.copy()
    new_hla_data['HLA'] = "HLA-X*01:01"  # Fake new allele

    features = hla_processor.get_features("HLA-X*01:01", new_hla_data)
    assert features.shape == (180,)
    assert features.sum() != 0  # Non-zero features

def test_hla_feature_consistency(hla_processor):
    """Same HLA should produce same features"""
    f1 = hla_processor.get_features("HLA-A*02:01")
    f2 = hla_processor.get_features("HLA-A*02:01")
    assert np.allclose(f1, f2)

# Peptide Embedding Tests
def test_embedding_shapes(embedder):
    """Verify ESM embeddings have correct dimensions"""
    embeddings = embedder.embed_peptides(TEST_PEPTIDES)
    assert embeddings.shape == (len(TEST_PEPTIDES), 320)  # esm2_t6_8M dim
    assert not embeddings.isna().any().any()

@pytest.mark.parametrize("peptide", TEST_PEPTIDES)
def test_embedding_consistency(embedder, peptide):
    """Same peptide should produce same embedding"""
    emb1 = embedder.embed_peptides([peptide])
    emb2 = embedder.embed_peptides([peptide])
    assert np.allclose(emb1.values, emb2.values)

def test_invalid_peptide_handling(embedder):
    """Test rejection of invalid peptides"""
    with pytest.raises(ValueError):
        embedder.embed_peptides(INVALID_PEPTIDES)

# Integration Tests
def test_feature_integration(hla_processor, embedder):
    """Test combined feature generation"""
    peptides = TEST_PEPTIDES
    hlas = ["HLA-A*02:01"] * len(peptides)

    # Generate both features
    peptide_embeddings = embedder.embed_peptides(peptides)
    hla_features = np.array([hla_processor.get_features(hla) for hla in hlas])

    assert peptide_embeddings.shape[0] == hla_features.shape[0]
    assert not np.isnan(hla_features).any()