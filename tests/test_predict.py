# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/112QDqAUa_X5_NDLi8sGxI8Q76VL_Eea7
"""

"""
Comprehensive unit tests for HLA-peptide prediction functionality
"""
import pytest
import numpy as np
import pandas as pd
from src.predict import HLAPredictor
from src.features import HLAFeatureGenerator, PeptideEmbedder

# Constants
VALID_PEPTIDES = ['ACDEFGHIK', 'YKLQPLTFL']
INVALID_PEPTIDES = ['ACDEFGXIK', 'YKLQPLTFLX', 'TOOSHORT']
KNOWN_HLA = ['HLA-A*02:01', 'HLA-B*07:02']
NEW_HLA = ['HLA-X*01:01', 'HLA-Y*02:02']

# Fixtures
@pytest.fixture
def sample_data():
    """Standard test dataset with known and new HLA alleles"""
    return pd.DataFrame({
        'HLA': KNOWN_HLA + NEW_HLA,
        'peptide': VALID_PEPTIDES * 2,
        'HLA_sequence': ['MVVMAPRTL...'] * 4  # Truncated sequences
    })

@pytest.fixture
def mock_predictor(monkeypatch):
    """Mocked predictor with controlled outputs"""
    class MockModel:
        def predict(self, inputs):
            # Returns 80% probability for first input, 30% for others
            batch_size = inputs[0].shape[0]
            return np.array([[0.8]] + [[0.3]] * (batch_size - 1))

    monkeypatch.setattr('src.predict.load_model', lambda *args: MockModel())
    return HLAPredictor(model_path="dummy.h5")

# Core Functionality Tests
def test_predictor_init(mock_predictor):
    """Verify all components initialize properly"""
    assert hasattr(mock_predictor, 'model')
    assert isinstance(mock_predictor.embedder, PeptideEmbedder)
    assert isinstance(mock_predictor.hla_processor, HLAFeatureGenerator)

# Prediction Tests
@pytest.mark.parametrize("peptide,hla", zip(VALID_PEPTIDES, KNOWN_HLA))
def test_valid_predictions(mock_predictor, peptide, hla):
    """Test predictions with valid inputs"""
    prob = mock_predictor.predict_single(peptide, hla)
    assert isinstance(prob, float)
    assert 0 <= prob <= 1

def test_batch_predictions(mock_predictor, sample_data):
    """Verify batch prediction output structure"""
    results = mock_predictor.predict(sample_data)

    assert isinstance(results, pd.DataFrame)
    assert set(results.columns) >= {'HLA', 'peptide', 'prediction_prob'}
    assert len(results) == len(sample_data)
    assert results['prediction_prob'].between(0, 1).all()

# Error Handling Tests
@pytest.mark.parametrize("hla", NEW_HLA)
def test_new_hla_handling(mock_predictor, hla):
    """Test proper error for new HLA alleles"""
    with pytest.raises(ValueError, match="provide peptide binding data"):
        mock_predictor.predict_single(VALID_PEPTIDES[0], hla)

@pytest.mark.parametrize("peptide", INVALID_PEPTIDES)
def test_invalid_peptide_handling(mock_predictor, peptide):
    """Test rejection of malformed peptides"""
    with pytest.raises(ValueError, match="invalid amino acids|must be 8-15"):
        mock_predictor.predict_single(peptide, KNOWN_HLA[0])

# Edge Cases
def test_empty_input(mock_predictor):
    """Test handling of empty DataFrames"""
    with pytest.raises(ValueError, match="No valid peptide sequences"):
        mock_predictor.predict(pd.DataFrame(columns=['HLA', 'peptide']))

def test_mixed_hla_types(mock_predictor, sample_data):
    """Test prediction with mixed known/new HLA"""
    with pytest.raises(ValueError):
        mock_predictor.predict(sample_data)
