# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/112QDqAUa_X5_NDLi8sGxI8Q76VL_Eea7
"""

# hla_predictor/model.py
import tensorflow as tf
from tensorflow.keras.layers import Input, Dense, Dropout, Lambda
from tensorflow.keras.models import Model
import tensorflow.keras.backend as K

def swish(x):
    """Swish activation function"""
    return x * tf.nn.sigmoid(x)

def build_model(peptide_dim=320, hla_dim=180):
    """
    Build the siamese network architecture for HLA-peptide interaction prediction

    Args:
        peptide_dim: Dimension of peptide embeddings (default: 320 for ESM)
        hla_dim: Dimension of HLA features (default: 180 from your features)

    Returns:
        Compiled Keras model
    """
    # Input layers
    peptide_input = Input(shape=(peptide_dim,), name='peptide_input')
    hla_input = Input(shape=(hla_dim,), name='hla_input')

    # Peptide branch
    x = Dense(256, activation=swish)(peptide_input)
    x = Dropout(0.2)(x)
    x = Dense(128, activation=swish)(x)
    peptide_output = Dropout(0.2)(x)

    # HLA branch
    y = Dense(128, activation=swish)(hla_input)
    hla_output = Dropout(0.2)(y)

    # Distance layer
    distance = Lambda(lambda tensors: K.abs(tensors[0] - tensors[1]),
                    name='absolute_distance')([peptide_output, hla_output])

    # Combined network
    z = Dense(64, activation=swish)(distance)
    z = Dropout(0.2)(z)
    z = Dense(32, activation=swish)(z)
    output = Dense(1, activation='sigmoid', name='output')(z)

    # Build model
    model = Model(inputs=[peptide_input, hla_input], outputs=output)

    # Compile with your original settings
    optimizer = tf.keras.optimizers.Adam(learning_rate=0.0001)
    model.compile(
        loss="binary_crossentropy",
        optimizer=optimizer,
        metrics=[
            "accuracy",
            tf.keras.metrics.AUC(name='auc'),
            tf.keras.metrics.Precision(name='precision'),
            tf.keras.metrics.Recall(name='recall')
        ]
    )

    return model

def load_model(model_path):
    """
    Helper function to load pretrained model
    """
    model = build_model()
    model.load_weights(model_path)
    return model


## usage example:
# # For training:
# from hla_predictor.model import build_model
# model = build_model()
# model.fit(...)

# # For prediction:
# from hla_predictor.model import load_model
# model = load_model("path/to/your_model.h5")
